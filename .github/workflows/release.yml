name: Release Agent

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24'

      - name: Get commit hash
        id: get_commit_hash
        run: echo "COMMIT_HASH=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Set Version
        id: set_version
        run: |
          # If this is a tag, use the tag name as version (without the 'v' prefix)
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            # Otherwise, use git describe to get a version based on the most recent tag
            VERSION=$(git describe --tags --always --dirty | sed 's/^v//')
            if [[ $GITHUB_REF == refs/heads/* ]]; then
              VERSION="$VERSION-$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')"
            fi
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ghcr.io/upwatchly/agent:latest
            ghcr.io/upwatchly/agent:${{ env.VERSION }}
          build-args: |
            VERSION=${{ env.VERSION }}
            COMMIT_HASH=${{ env.COMMIT_HASH }}

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true